diff --git a/base/logging.cpp b/base/logging.cpp
index 9ae4e7c8c1..9fe227bd83 100644
--- a/base/logging.cpp
+++ b/base/logging.cpp
@@ -95,7 +95,7 @@ void LogMessageDefault(LogLevel level, SrcPoint const & srcPoint, string const &
   out << DebugPrint(srcPoint) << msg << endl;
   cerr << out.str();
 
-  CHECK_LESS(level, g_LogAbortLevel, ("Abort. Log level is too serious", level));
+//  CHECK_LESS(level, g_LogAbortLevel, ("Abort. Log level is too serious", level));
 }
 
 void LogMessageTests(LogLevel level, SrcPoint const &, string const & msg)
@@ -106,7 +106,7 @@ void LogMessageTests(LogLevel level, SrcPoint const &, string const & msg)
   out << msg << endl;
   cerr << out.str();
 
-  CHECK_LESS(level, g_LogAbortLevel, ("Abort. Log level is too serious", level));
+//  CHECK_LESS(level, g_LogAbortLevel, ("Abort. Log level is too serious", level));
 }
 
 LogMessageFn LogMessage = &LogMessageDefault;
diff --git a/drape/visual_scale.hpp b/drape/visual_scale.hpp
index 68518196ab..4c2b31b1d6 100644
--- a/drape/visual_scale.hpp
+++ b/drape/visual_scale.hpp
@@ -1,5 +1,7 @@
 #pragma once
 
+#include "platform/platform.hpp"
+
 namespace dp
 {
 inline double VisualScale(double exactDensityDPI)
diff --git a/drape/vulkan/vulkan_layers.cpp b/drape/vulkan/vulkan_layers.cpp
index 556be4a1fa..2aab2e45e9 100755
--- a/drape/vulkan/vulkan_layers.cpp
+++ b/drape/vulkan/vulkan_layers.cpp
@@ -115,8 +115,8 @@ std::string GetReportObjectTypeString(VkDebugReportObjectTypeEXT objectType)
     return "DEBUG_REPORT_CALLBACK_EXT";
   case VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: return "DISPLAY_KHR";
   case VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: return "DISPLAY_MODE_KHR";
-  case VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT: return "OBJECT_TABLE_NVX";
-  case VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT:
+//  case VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT: return "OBJECT_TABLE_NVX";
+//  case VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT:
     return "INDIRECT_COMMANDS_LAYOUT_NVX";
   case VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: return "VALIDATION_CACHE_EXT";
   case VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: return "SAMPLER_YCBCR_CONVERSION";
@@ -124,7 +124,7 @@ std::string GetReportObjectTypeString(VkDebugReportObjectTypeEXT objectType)
     return "DESCRIPTOR_UPDATE_TEMPLATE";
   case VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT:
     return "ACCELERATION_STRUCTURE_NV";
-  case VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT: return "RANGE_SIZE";
+//  case VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT: return "RANGE_SIZE";
   case VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT: return "MAX_ENUM";
   }
   UNREACHABLE();
diff --git a/drape/vulkan/vulkan_utils.cpp b/drape/vulkan/vulkan_utils.cpp
index 02062cfbb8..2c9443453b 100644
--- a/drape/vulkan/vulkan_utils.cpp
+++ b/drape/vulkan/vulkan_utils.cpp
@@ -50,7 +50,7 @@ std::string GetVulkanResultString(VkResult result)
   case VK_ERROR_NOT_PERMITTED_EXT: return "VK_ERROR_NOT_PERMITTED_EXT";
   case VK_ERROR_OUT_OF_POOL_MEMORY_KHR: return "VK_ERROR_OUT_OF_POOL_MEMORY_KHR";
   case VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: return "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR";
-  case VK_RESULT_RANGE_SIZE: return "VK_RESULT_RANGE_SIZE";
+//  case VK_RESULT_RANGE_SIZE: return "VK_RESULT_RANGE_SIZE";
   case VK_RESULT_MAX_ENUM: return "VK_RESULT_MAX_ENUM";
   }
   UNREACHABLE();
diff --git a/drape_frontend/drape_engine.cpp b/drape_frontend/drape_engine.cpp
index 43dd97b0f6..6a9904f525 100644
--- a/drape_frontend/drape_engine.cpp
+++ b/drape_frontend/drape_engine.cpp
@@ -990,4 +990,9 @@ void DrapeEngine::UpdateMyPositionRoutingOffset(bool useDefault, int offsetY)
                                   make_unique_dp<UpdateMyPositionRoutingOffsetMessage>(useDefault, offsetY),
                                   MessagePriority::Normal);
 }
+
+void DrapeEngine::OnCompassTapped() const
+{
+  m_frontend->OnCompassTapped();
+}
 }  // namespace df
diff --git a/drape_frontend/drape_engine.hpp b/drape_frontend/drape_engine.hpp
index fd628bd67b..0980dc8051 100644
--- a/drape_frontend/drape_engine.hpp
+++ b/drape_frontend/drape_engine.hpp
@@ -259,6 +259,8 @@ public:
 
   void UpdateVisualScale(double vs, bool needStopRendering);
   void UpdateMyPositionRoutingOffset(bool useDefault, int offsetY);
+  
+  void OnCompassTapped() const;
 
 private:
   void AddUserEvent(drape_ptr<UserEvent> && e);
diff --git a/drape_frontend/frontend_renderer.hpp b/drape_frontend/frontend_renderer.hpp
index 92e008430d..d68d4ea411 100755
--- a/drape_frontend/frontend_renderer.hpp
+++ b/drape_frontend/frontend_renderer.hpp
@@ -146,6 +146,8 @@ public:
                        m2::PointD const & pxZero, TAnimationCreator const & parallelAnimCreator) override;
 
   drape_ptr<ScenarioManager> const & GetScenarioManager() const;
+  
+  void OnCompassTapped();
 
 protected:
   void AcceptMessage(ref_ptr<Message> message) override;
@@ -264,8 +266,6 @@ private:
   bool CheckTileGenerations(TileKey const & tileKey);
   void UpdateCanBeDeletedStatus();
 
-  void OnCompassTapped();
-
   FeatureID GetVisiblePOI(m2::PointD const & pixelPoint);
   FeatureID GetVisiblePOI(m2::RectD const & pixelRect);
 
diff --git a/xcode/common.xcconfig b/xcode/common.xcconfig
index 687d30ff13..2e20530880 100644
--- a/xcode/common.xcconfig
+++ b/xcode/common.xcconfig
@@ -5,6 +5,10 @@ OMIM_ROOT = $(PROJECT_DIR)/../..
 QT_PATH = /usr/local/opt/qt5
 BOOST_ROOT = $(OMIM_ROOT)/3party/boost
 
+// Path for Cruizla project
+CRZ_OMIM_ROOT = $(PROJECT_DIR)/../omim
+CRZ_BOOST_ROOT = $(CRZ_OMIM_ROOT)/3party/boost
+
 HEADER_SEARCH_PATHS = $(inherited) $(OMIM_ROOT) $(BOOST_ROOT)
 FRAMEWORK_SEARCH_PATHS[sdk=macosx*] = $(QT_PATH)/lib
 
